import telebot
from telebot import types
import traceback
import requests
from urllib.request import urlopen
import lxml
from lxml import etree
import csv

def replace_trash(string):
  return(string.replace(' ', '').replace('\n', ''))

bot = telebot.TeleBot("7121373991:AAG_t5_GsD9UAzghR9hQJPv1Elx31jwlC70")
>
last_messages = {}

@bot.message_handler(content_types = ['photo', 'video', 'audio', 'document', 'sticker', 'animation', 'voice', 'video_note', 'story'])
def get_content(message):
    msg = bot.reply_to(message, '–ú–Ω–µ –±—ã –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–∞–º, –Ω–æ —è –Ω–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–∞–∫–æ–≥–æ —Ä–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—èüòî.')
    last_messages[message.chat.id] = [msg.message_id]

@bot.message_handler(commands = ['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup()
    btn1 = types.KeyboardButton('–ú–µ–Ω—é')
    btn2 = types.KeyboardButton('–ü–æ–º–æ—â—å')
    btn3 = types.KeyboardButton('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
    btn4 = types.KeyboardButton('–°–ø—Ä–∞–≤–∫–∞')
    markup.row(btn1, btn4)
    markup.row(btn2, btn3)
    markup2 = types.InlineKeyboardMarkup()
    msg = bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}', reply_markup = markup)
    last_messages[message.chat.id] = [msg.message_id]

@bot.message_handler(commands = ['menu'])
def menu1(message):
    file = open('./mainphoto.jpg', 'rb')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞ —Å–µ–≥–æ–¥–Ω—è', url='https://www.youtube.com/watch?v=OfBgJQ5kjTA'))
    markup.add(types.InlineKeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é', url='https://www.youtube.com/watch?v=OfBgJQ5kjTA'))
    markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', url='https://www.youtube.com/watch?v=OfBgJQ5kjTA'))
    msg = bot.send_photo(message.chat.id, file,
                         caption='–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –≤ –ü–µ—Ä–º–∏, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –Ω–∏–∂–µ:',
                         reply_markup=markup)
    last_messages[message.chat.id] = [msg.message_id]

@bot.message_handler(commands = ['restart'])
def restart1(message):
    if message.chat.id in last_messages:
        for msg_id in last_messages[message.chat.id]:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                traceback.print_exc()  # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        last_messages[message.chat.id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π

    msg = bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è. –ü—Ä–æ–ø–∏—à–∏—Ç–µ '/start' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
    last_messages[message.chat.id] = [msg.message_id]
    bot.register_next_step_handler(message, start)

@bot.message_handler(commands = ['support'])
def support(message):
    support_text = """
    –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:
    - Telegram: @savasakii –∏–ª–∏ @egorichlyadov
    - E-mail: saveliybk30@gmail.com –∏–ª–∏ lyadovegorka@yandex.ru
    """
    msg = bot.send_message(message.chat.id, support_text)
    last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(func=lambda message: message.text.lower() == '–º–µ–Ω—é')
def menu2(message):
    file = open('./mainphoto.jpg', 'rb')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞ —Å–µ–≥–æ–¥–Ω—è', url='https://www.youtube.com/watch?v=OfBgJQ5kjTA'))
    markup.add(types.InlineKeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é', url='https://www.youtube.com/watch?v=OfBgJQ5kjTA'))
    markup.add(types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', url='https://www.youtube.com/watch?v=OfBgJQ5kjTA'))
    msg = bot.send_photo(message.chat.id, file, caption='–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –≤ –ü–µ—Ä–º–∏, —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –Ω–∏–∂–µ:', reply_markup=markup)
    last_messages[message.chat.id] = [msg.message_id]

@bot.message_handler(func=lambda message: message.text.lower() == '–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞')
def restart2(message):
    if message.chat.id in last_messages:
        for msg_id in last_messages[message.chat.id]:
            try:
                bot.delete_message(message.chat.id, msg_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                traceback.print_exc()  # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        last_messages[message.chat.id] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π

    msg = bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è. –ü—Ä–æ–ø–∏—à–∏—Ç–µ '/start' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
    last_messages[message.chat.id] = [msg.message_id]
    bot.register_next_step_handler(message, start)

@bot.message_handler(func=lambda message: message.text.lower() == '—Å–ø—Ä–∞–≤–∫–∞')
def help_message(message):
    help_text = """
    –í–æ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–æ—Ç—É:
    - –ö–æ–º–∞–Ω–¥–∞ '/start' - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
    - –ö–æ–º–∞–Ω–¥–∞ '/menu' - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    - –ö–æ–º–∞–Ω–¥–∞ '/support' - –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –Ω–∞—Å—á—ë—Ç –≤–∞—à–∏—Ö –ø—Ä–æ–±–ª–µ–º.
    - –ö–æ–º–∞–Ω–¥–∞ '/restart' - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é —Å –±–æ—Ç–æ–º.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–ú–µ–Ω—é' - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–°–ø—Ä–∞–≤–∫–∞' - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–ü–æ–º–æ—â—å' - –ø–æ–ª—É—á–∏—Ç—å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ø—Ä–æ–ø–∏—à–∏—Ç–µ '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–ø–∏—à–∏—Ç–µ '/start' —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
    """
    msg = bot.reply_to(message, help_text)
    last_messages[message.chat.id] = [msg.message_id]

@bot.message_handler(func=lambda message: message.text.lower() == '–ø–æ–º–æ—â—å')
def help_document(message):
    with open('–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.pdf', 'rb') as help_file:
        msg = bot.send_message(message.chat.id, '–í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É')
        bot.send_document(message.chat.id, help_file)
        last_messages[message.chat.id] = [msg.message_id]


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    msg = bot.reply_to(message, "–ß—Ç–æ —Ç–æ –≤—ã –Ω–µ —Ç–æ –Ω–∞–∂–∞–ª–∏, –ø—Ä–æ–ø–∏—à–∏—Ç–µ '/start'")


    if message.chat.id not in last_messages:
        last_messages[message.chat.id] = []
    last_messages[message.chat.id].extend([message.message_id, msg.message_id])

# bot.polling(none_stop=True)

url = 'https://aviabilety-loukoster.ru/raspisanie-rejsov'
response = urlopen(url)
htmlparser = etree.HTMLParser()
tree = etree.parse(response, htmlparser)
# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
# –î–ª—è —Å–∞–π—Ç–æ–≤ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –¥–∏—Å–∫
url = 'https://aviabilety-loukoster.ru/raspisanie-rejsov'
headers = {'Content-Type': 'text/html',}
response = requests.get(url, headers=headers)
html = response.text
with open ('Yandex2.html', 'w') as f:
    f.write(html)

local = 'file:///content/pobeda2.html'
response = urlopen(local)
htmlparser = etree.HTMLParser()
tree = etree.parse(response, htmlparser)
# –ü—Ä–∏ –ø–æ–º–æ—â–∏ Xpath –ø—É—Ç–µ–π –¥–æ—Å—Ç–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ list(list())
result = list()

for root_element in (tree.xpath('/html/body/div/div/div[1]/article/div[2]/div[2]/ul/li')):
  #print(replace_trash(root_element.xpath('h2/text()')[0]))
  source = replace_trash(root_element.xpath('h2/text()')[0]).split('‚Äî')[0]
  # div/table/tbody/tr[2]/td[1]
  for row in root_element.xpath('div/table/tbody/tr'):
    flight = row.xpath('td[1]/text()')
    # source = flight.split('-')[0]
    if len(flight) > 0:
      flight = replace_trash(flight[0])
      dest = replace_trash(row.xpath('td[2]/text()')[0])
      start_date = replace_trash(row.xpath('td[3]/text()')[0])
      days = row.xpath('td[4]/text()')[0].replace('\n', '')
      depart = replace_trash(row.xpath('td[5]/text()')[0])
      arrival = replace_trash(row.xpath('td[6]/text()')[0])
      # print(f'{flight} - {source} - {dest} - {start_date} - {days} - {depart} - {arrival}')
      result.append([flight, source, dest, start_date, days, depart, arrival])


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
with open('Yandex.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile, delimiter=',')
    writer.writerow(['flight', 'source', 'dest', 'start_date', 'days', 'depart', 'arrival'])
    for row in result:
        writer.writerow(row)